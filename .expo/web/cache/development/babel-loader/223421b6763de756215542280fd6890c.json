{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/hayk/Desktop/MentorApp/src/components/CurrentLocation.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport Constants from 'expo-constants';\nimport * as Location from 'expo-location';\nexport default function CurrentLocation() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errorMsg = _useState4[0],\n      setErrorMsg = _useState4[1];\n\n  var _useState5 = useState('Waiting'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      renderData = _useState6[0],\n      setRender = _useState6[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Location$reque, status, getLocation, text;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(Platform.OS === 'android' && !Constants.isDevice)) {\n                _context.next = 3;\n                break;\n              }\n\n              setErrorMsg('Oops, this will not work on Snack in an Android emulator. Try it on your device!');\n              return _context.abrupt(\"return\");\n\n            case 3:\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n            case 5:\n              _await$Location$reque = _context.sent;\n              status = _await$Location$reque.status;\n\n              if (!(status !== 'granted')) {\n                _context.next = 10;\n                break;\n              }\n\n              setErrorMsg('Permission to access location was denied');\n              return _context.abrupt(\"return\");\n\n            case 10:\n              _context.next = 12;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n            case 12:\n              getLocation = _context.sent;\n              setLocation(getLocation);\n              console.log(getLocation);\n              _context.next = 17;\n              return _regeneratorRuntime.awrap(Location.reverseGeocodeAsync({\n                latitude: getLocation.coords.latitude,\n                longitude: getLocation.coords.longitude\n              }));\n\n            case 17:\n              text = _context.sent;\n              console.log(text);\n              setRender(text);\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.paragraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, renderData));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20\n  },\n  paragraph: {\n    fontSize: 18,\n    textAlign: 'center'\n  }\n});","map":{"version":3,"sources":["/home/hayk/Desktop/MentorApp/src/components/CurrentLocation.js"],"names":["React","useState","useEffect","NavigationContainer","createStackNavigator","Constants","Location","CurrentLocation","location","setLocation","errorMsg","setErrorMsg","renderData","setRender","Platform","OS","isDevice","requestForegroundPermissionsAsync","status","getCurrentPositionAsync","getLocation","console","log","reverseGeocodeAsync","latitude","coords","longitude","text","styles","container","paragraph","StyleSheet","create","flex","alignItems","justifyContent","padding","fontSize","textAlign"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAO,KAAKC,QAAZ,MAA0B,eAA1B;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,kBAAgCN,QAAQ,CAAC,IAAD,CAAxC;AAAA;AAAA,MAAOO,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAAgCR,QAAQ,CAAC,IAAD,CAAxC;AAAA;AAAA,MAAOS,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAAgCV,QAAQ,CAAC,SAAD,CAAxC;AAAA;AAAA,MAAOW,UAAP;AAAA,MAAmBC,SAAnB;;AAEAX,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBACKY,QAAQ,CAACC,EAAT,KAAgB,SAAhB,IAA6B,CAACV,SAAS,CAACW,QAD7C;AAAA;AAAA;AAAA;;AAEGL,cAAAA,WAAW,CACT,kFADS,CAAX;AAFH;;AAAA;AAAA;AAAA,+CAOwBL,QAAQ,CAACW,iCAAT,EAPxB;;AAAA;AAAA;AAOOC,cAAAA,MAPP,yBAOOA,MAPP;;AAAA,oBAQKA,MAAM,KAAK,SARhB;AAAA;AAAA;AAAA;;AASGP,cAAAA,WAAW,CAAC,0CAAD,CAAX;AATH;;AAAA;AAAA;AAAA,+CAayBL,QAAQ,CAACa,uBAAT,CAAiC,EAAjC,CAbzB;;AAAA;AAaKC,cAAAA,WAbL;AAcCX,cAAAA,WAAW,CAACW,WAAD,CAAX;AACNC,cAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AAfK;AAAA,+CAgBoBd,QAAQ,CAACiB,mBAAT,CAA6B;AAC9CC,gBAAAA,QAAQ,EAAEJ,WAAW,CAACK,MAAZ,CAAmBD,QADiB;AAE9CE,gBAAAA,SAAS,EAAEN,WAAW,CAACK,MAAZ,CAAmBC;AAFgB,eAA7B,CAhBpB;;AAAA;AAgBOC,cAAAA,IAhBP;AAoBCN,cAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;AACAd,cAAAA,SAAS,CAACc,IAAD,CAAT;;AArBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAuBD,GAxBQ,EAwBN,EAxBM,CAAT;AA0BA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACE,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgClB,UAAhC,CADF,CADF;AAKD;AAED,IAAMgB,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE,QAHP;AAITC,IAAAA,OAAO,EAAE;AAJA,GADoB;AAO/BN,EAAAA,SAAS,EAAE;AACTO,IAAAA,QAAQ,EAAE,EADD;AAETC,IAAAA,SAAS,EAAE;AAFF;AAPoB,CAAlB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Platform, Text, View, StyleSheet } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport Constants from 'expo-constants';\nimport * as Location from 'expo-location';\n\nexport default function CurrentLocation() {\n  const [location, setLocation] = useState(null);\n  const [errorMsg, setErrorMsg] = useState(null);\n  const [renderData, setRender] = useState('Waiting');\n\n  useEffect(() => {\n    (async () => {\n      if (Platform.OS === 'android' && !Constants.isDevice) {\n        setErrorMsg(\n          'Oops, this will not work on Snack in an Android emulator. Try it on your device!'\n        );\n        return;\n      }\n      let { status } = await Location.requestForegroundPermissionsAsync();\n      if (status !== 'granted') {\n        setErrorMsg('Permission to access location was denied');\n        return;\n      }\n\n      let getLocation = await Location.getCurrentPositionAsync({});\n      setLocation(getLocation);\nconsole.log(getLocation)\n      const text = await Location.reverseGeocodeAsync({\n        latitude: getLocation.coords.latitude,\n        longitude: getLocation.coords.longitude\n      });\n      console.log(text);\n      setRender(text)\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.paragraph}>{renderData}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  paragraph: {\n    fontSize: 18,\n    textAlign: 'center',\n  },\n});"]},"metadata":{},"sourceType":"module"}