{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/hayk/Desktop/MentorApp/src/components/CurrentLocation.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Constants from 'expo-constants';\nvar apiKey = 'YAIzaSyCMu7j5qACkKlCMNc2E7kQkPv0JA3FS7O8';\nimport * as Location from 'expo-location';\nexport default function App() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errorMsg = _useState4[0],\n      setErrorMsg = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      getLocation = _useState6[0],\n      setGetLocation = _useState6[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Location$reque, status, regionName;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Location.requestPermissionsAsync());\n\n            case 2:\n              _await$Location$reque = _context.sent;\n              status = _await$Location$reque.status;\n\n              if (status !== 'granted') {\n                setErrorMsg('Permission to access location was denied');\n              }\n\n              Location.setGoogleApiKey(apiKey);\n              console.log(status);\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Location.reverseGeocodeAsync({\n                latitude: 19.2514799,\n                longitude: 75.7138884\n              }));\n\n            case 9:\n              regionName = _context.sent;\n              setLocation(regionName);\n              console.log(regionName, 'nothing');\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, [getLocation]);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.big,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, !location ? 'Waiting' : JSON.stringify(location[0][\"city\"])), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return setGetLocation(!getLocation);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      height: 100,\n      backgroundColor: 'teal',\n      justifyContent: 'center',\n      alignItems: 'center',\n      borderRadius: 10,\n      marginTop: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.btnText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, \" GET LOCATION \"))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'white',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  big: {\n    fontSize: 18,\n    color: 'black',\n    fontWeight: \"bold\"\n  },\n  btnText: {\n    fontWeight: \"bold\",\n    fontSize: 25,\n    color: \"white\"\n  }\n});","map":{"version":3,"sources":["/home/hayk/Desktop/MentorApp/src/components/CurrentLocation.js"],"names":["React","useEffect","useState","Constants","apiKey","Location","App","location","setLocation","errorMsg","setErrorMsg","getLocation","setGetLocation","requestPermissionsAsync","status","setGoogleApiKey","console","log","reverseGeocodeAsync","latitude","longitude","regionName","styles","container","big","JSON","stringify","height","backgroundColor","justifyContent","alignItems","borderRadius","marginTop","btnText","StyleSheet","create","flex","fontSize","color","fontWeight"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Text, View, StyleSheet, TouchableOpacity } from 'react-native';\nimport Constants from 'expo-constants';\n\n// You can import from local files\n// import AssetExample from './components/AssetExample';\n\nlet apiKey = 'YAIzaSyCMu7j5qACkKlCMNc2E7kQkPv0JA3FS7O8';\n\n// or any pure javascript modules available in npm\n// import { Card } from 'react-native-paper';\nimport * as Location from 'expo-location';\n\nexport default function App() {\n  const [location, setLocation] = useState(null);\n  const [errorMsg, setErrorMsg] = useState(null);\n  const [getLocation, setGetLocation] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      let { status } = await Location.requestPermissionsAsync();\n      if (status !== 'granted') {\n        setErrorMsg('Permission to access location was denied');\n      }\n\n      Location.setGoogleApiKey(apiKey);\n\n      console.log(status);\n\n      let regionName = await Location.reverseGeocodeAsync({\n        latitude: 19.2514799,\n        longitude: 75.7138884,\n      });\n\n      setLocation(regionName);\n      console.log(regionName, 'nothing');\n\n      // console.log();\n    })();\n  }, [getLocation]);\n\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.big}>\n        {!location ? 'Waiting' : JSON.stringify(location[0][\"city\"])}\n      </Text>\n      <TouchableOpacity onPress={() => setGetLocation(!getLocation)}>\n        <View\n          style={{\n            height: 100,\n            backgroundColor: 'teal',\n            justifyContent: 'center',\n            alignItems: 'center',\n            borderRadius: 10,\n            marginTop: 20,\n          }}>\n          <Text style={styles.btnText}> GET LOCATION </Text>\n        </View>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'white',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  big: {\n    fontSize: 18,\n    color: 'black',\n    fontWeight: \"bold\"\n  },\n  btnText:{\n    fontWeight: \"bold\",\n    fontSize: 25,\n    color: \"white\"\n  }\n});"]},"metadata":{},"sourceType":"module"}